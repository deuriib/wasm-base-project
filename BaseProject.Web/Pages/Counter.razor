@page "/counter"
@using BaseProject.Infrastructure.Store.Counter
@using BaseProject.Infrastructure.Store.App
@inherits FluxorComponent
@inject IState<CounterState> State
@inject CounterFacade CounterFacade
@inject ISnackbar Snackbar

<PageTitle>Counter</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>

<MudPaper Class="pa-4" Elevation="3" MinWidth="220px">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudStack Row="false"
                  Spacing="4"
                  Justify="Justify.FlexStart"
                  AlignItems="AlignItems.Start">

            <MudStack Row="false"
                      Spacing="2">
                <MudText Typo="Typo.body1" Color="Color.Info">Increment By: (@IncrementBy)</MudText>

                <MudText Typo="Typo.body2">Current count: @State.Value.CurrentCount</MudText>
            </MudStack>

            <MudStack Row="true"
                      Spacing="2"
                      AlignItems="AlignItems.Center"
                      Justify="Justify.FlexStart"
                      Class="flex-wrap">
                <MudButton StartIcon="@Icons.Material.Filled.AddCircle"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           OnClick="IncrementCount">
                    Increment
                </MudButton>

                <MudButton StartIcon="@Icons.Material.Filled.ChangeCircle"
                           Color="Color.Secondary"
                           Variant="Variant.Outlined"
                           OnClick="ResetCounter">
                    Reset Count
                </MudButton>
            </MudStack>
        </MudStack>
    </MudContainer>
</MudPaper>


@code {

    [Parameter]
    public required int IncrementBy { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<ResetCounterAction>(result =>
            Snackbar
                .Add(message: "Counter was reset to initial value",
                    severity: Severity.Info));

        await base.OnInitializedAsync();
    }

    private void IncrementCount()
        => CounterFacade.IncrementCounter(IncrementBy);

    private void ResetCounter()
        => CounterFacade.ResetCounter();

}