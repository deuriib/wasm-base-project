@page "/authentication/login"
@attribute [AllowAnonymous]
@layout EmptyLayout
@using BaseProject.Infrastructure.ViewModels.Auth
@using FluentValidation
@inherits FluxorComponent
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthFacade AuthFacade
@inject IState<AppState> AppState
@inject IState<AuthState> AuthState
@inject IValidator<LoginWithEmailViewModel> Validator

<PageTitle>Login</PageTitle>

<MudPaper Class="pa-8" MinWidth="375px">
    <MudStack Row="false"
              Spacing="10"
              AlignItems="AlignItems.Center"
              Justify="Justify.SpaceEvenly">

        <MudStack Row="false"
                  Spacing="2"
                  AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h3" Color="Color.Primary">@AppState.Value.AppName</MudText>
            <MudText Typo="Typo.h5">Sign In</MudText>
        </MudStack>

        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudForm Model="@_model"
                     @ref="@_form"
                     Validation="@Validator.ValidateValue()"
                     ValidationDelay="0">
                <MudStack Row="false"
                          AlignItems="AlignItems.Stretch"
                          Spacing="2">


                    <MudTextField T="string" @bind-Value="_model.Email"
                                  InputType="InputType.Email"
                                  For="() => _model.Email"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Immediate="true"
                                  Label="Email"/>

                    <MudTextField T="string" @bind-Value="_model.Password"
                                  InputType="@(AuthState.Value.IsPasswordVisible ? InputType.Text : InputType.Password)"
                                  For="() => _model.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@(AuthState.Value.IsPasswordVisible ? Icons.Material.Filled.LockOpen : Icons.Material.Filled.Lock)"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Immediate="true"
                                  Label="Password"/>

                    <div class="d-flex align-center justify-space-between flex-wrap gap-2">
                        <MudCheckBox @bind-Checked="@_model.RememberMe"
                                     For="() => _model.RememberMe"
                                     StopClickPropagation="true"
                                     Dense="true"
                                     Label="Remember me"
                                     Color="Color.Primary"/>

                        <MudLink Color="Color.Secondary"
                                 OnClick="GoToForgotPassword">
                            Forgot password?
                        </MudLink>
                    </div>

                    <MudButton OnClick="Submit"
                               ButtonType="ButtonType.Submit"
                               Class="mt-2"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Disabled="@(_form?.IsValid == false || AuthState.Value.IsLoading)">
                        @if (AuthState.Value.IsLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>
                </MudStack>
            </MudForm>
        </MudContainer>

        <MudStack Row="false"
                  AlignItems="AlignItems.Center"
                  Spacing="2">
            <MudText Typo="Typo.caption">Or login with</MudText>

            <MudStack Row="true"
                      Spacing="2"
                      AlignItems="AlignItems.Center"
                      Justify="Justify.SpaceEvenly">
                <MudButton StartIcon="@Icons.Custom.Brands.Facebook"
                           Color="Color.Secondary"
                           Disabled="true"
                           Variant="Variant.Outlined">
                    Facebook
                </MudButton>

                <MudButton StartIcon="@Icons.Custom.Brands.Google"
                           Color="Color.Secondary"
                           Disabled="true"
                           Variant="Variant.Outlined">
                    Google
                </MudButton>
            </MudStack>
        </MudStack>


        <MudButton EndIcon="@Icons.Material.Filled.ArrowForward"
                   OnClick="GoToRegister"
                   Color="Color.Tertiary"
                   Variant="Variant.Text">
            Create new account
        </MudButton>

    </MudStack>
</MudPaper>

@code {

    [Parameter]
    public required string? ReturnUrl { get; set; }

    private LoginWithEmailViewModel _model = new();
    private MudForm _form = new();

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<LoginFailedAction>(action =>
            Snackbar.Add(action.ErrorMessage, MudBlazor.Severity.Error));

        SubscribeToAction<LoginSuccessAction>(action =>
            NavigationManager
                .NavigateToUri(action.ReturnUrl, false, true));

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!_form.IsValid)
            return;

        AuthFacade
            .LoginWithEmailAndPassword(_model.Email!,
                _model.Password!, 
                _model.RememberMe, 
                ReturnUrl ?? "/");
    }

    private void TogglePasswordVisibility()
        => AuthFacade.TogglePasswordInputVisibility();

    private void GoToForgotPassword()
        => NavigationManager
            .NavigateToUri($"/authentication/forgot-password");

    private void GoToRegister()
        => NavigationManager
            .NavigateToUri($"/authentication/register");

}