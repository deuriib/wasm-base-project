@page "/authentication/register"
@attribute [AllowAnonymous]
@layout EmptyLayout
@inherits FluxorComponent
@using BaseProject.Infrastructure.ViewModels.Auth
@using FluentValidation
@using Severity = MudBlazor.Severity
@inject AuthFacade AuthFacade
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IValidator<RegisterViewModel> Validator
@inject IState<AppState> AppState
@inject IState<AuthState> AuthState

<PageTitle>Register</PageTitle>

<MudPaper Class="pa-8 d-flex flex-column gap-8 align-center justify-space-evenly">
    <MudContainer Class="gap-2 d-flex flex-column align-center">
        <MudText Typo="Typo.h3" Color="Color.Primary">@AppState.Value.AppName</MudText>
        <MudText Typo="Typo.h5">Sign Up</MudText>
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.Large">
        <MudForm Model="@_model"
                 @ref="@_form"
                 Validation="@Validator.ValidateValue()"
                 ValidationDelay="0"
                 class="d-flex flex-column align-stretch gap-4">

            <MudTextField T="string" @bind-Value="_model!.Email"
                          InputType="InputType.Email"
                          For="() => _model!.Email"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Immediate="true"
                          Label="Email"/>

            <MudTextField T="string" @bind-Value="_model!.Password"
                          InputType="InputType.Password"
                          For="() => _model!.Password"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Immediate="true"
                          Label="Password"/>

            <MudTextField T="string" @bind-Value="_model!.ConfirmPassword"
                          InputType="InputType.Password"
                          For="() => _model!.ConfirmPassword"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Immediate="true"
                          Label="Confirm Password"/>


            <MudButton OnClick="Submit"
                       Class="mt-2"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Disabled="@(!_form.IsValid || AuthState.Value.IsLoading)">
                @if (AuthState.Value.IsLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Regiser</MudText>
                }
            </MudButton>
        </MudForm>
    </MudContainer>

    <MudButton OnClick="GoToLogin"
               Color="Color.Tertiary"
               Variant="Variant.Text">
        Already have an account? Login
    </MudButton>
</MudPaper>


@code {
    
    [Parameter]
    public string? ReturnUrl { get; set; }
    
    private RegisterViewModel _model = new();
    private MudForm _form = new();

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<RegisterActionFailed>(action =>
            Snackbar.Add(action.ErrorMessage, Severity.Error));

        SubscribeToAction<RegisterActionSuccess>(action =>
            NavigationManager.NavigateTo("/"));

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!_form.IsValid)
            return;

        AuthFacade
            .LoginWithEmailAndPassword(_model.Email!, _model.Password!);
    }

    private void GoToLogin()
        => NavigationManager
            .NavigateTo($"/authentication/login?returnUrl=/{ReturnUrl}");

}