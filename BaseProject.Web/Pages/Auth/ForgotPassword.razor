@page "/authentication/forgot-password"
@using FluentValidation
@using BaseProject.Infrastructure.ViewModels.Auth
@using Severity = MudBlazor.Severity
@attribute [AllowAnonymous]
@inherits FluxorComponent
@layout EmptyLayout
@inject IState<AppState> AppState
@inject IState<AuthState> AuthState
@inject IValidator<ForgotPasswordViewModel> Validator
@inject AuthFacade AuthFacade
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Forgot Password</PageTitle>

<MudPaper Class="pa-8" MinWidth="375px">
    <MudStack
        Row="false"
        Spacing="10"
        AlignItems="AlignItems.Center"
        Justify="Justify.SpaceEvenly">

        <MudStack Row="false"
                  Spacing="2"
                  AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h3" Color="Color.Primary">@AppState.Value.AppName</MudText>
            <MudText Typo="Typo.h5">Forgot Password</MudText>
        </MudStack>

        <MudContainer MaxWidth="MaxWidth.Large">
            @if (AuthState.Value.IsEmailForgotPasswordSent)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">Please verify the link sent to @_model.Email</MudText>
            }
            else
            {
                <MudForm Model="@_model"
                         @ref="@_form"
                         Validation="@Validator.ValidateValue()"
                         ValidationDelay="0">
                    <MudStack Row="false"
                              AlignItems="AlignItems.Stretch"
                              Spacing="2">


                        <MudTextField T="string" @bind-Value="_model.Email"
                                      InputType="InputType.Email"
                                      For="() => _model!.Email"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Email"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Immediate="true"
                                      Label="Email"/>

                        <MudButton OnClick="Submit"
                                   Class="mt-2"
                                   Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   Disabled="@(!_form.IsValid || AuthState.Value.IsLoading)">
                            @if (AuthState.Value.IsLoading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Send Email</MudText>
                            }
                        </MudButton>
                    </MudStack>
                </MudForm>
            }
        </MudContainer>
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudStack
                Row="true"
                AlignItems="AlignItems.Center"
                Justify="Justify.SpaceBetween">
                <MudButton StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="GoToLogin"
                           Color="Color.Tertiary"
                           Variant="Variant.Text">
                    Back to login
                </MudButton>

                <MudButton EndIcon="@Icons.Material.Filled.ArrowForward"
                           OnClick="GoToRegister"
                           Color="Color.Tertiary"
                           Variant="Variant.Text">
                    Create new account
                </MudButton>

            </MudStack>
        </MudContainer>
    </MudStack>
</MudPaper>

@code {
    private ForgotPasswordViewModel _model = new();
    private MudForm _form = new();

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<ForgotPasswordFailAction>(action =>
            Snackbar.Add(action.ErrorMessage, Severity.Error));

        SubscribeToAction<ForgotPasswordSuccessAction>(_ =>
        {
            Snackbar.Add("Email sent", Severity.Success);
            _form.Reset();
        });

        AuthFacade.ResetForgotPassword();

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!_form.IsValid)
            return;

        AuthFacade
            .ForgotPassword(_model.Email!);
    }

    private void GoToLogin()
        => NavigationManager
            .NavigateToUri($"/authentication/login");

    private void GoToRegister()
        => NavigationManager
            .NavigateToUri($"/authentication/register");

}