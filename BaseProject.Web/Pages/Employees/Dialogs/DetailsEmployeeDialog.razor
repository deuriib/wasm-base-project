@using BaseProject.Infrastructure.Store.Employees
@inherits FluxorComponent
@inject IState<EmployeesState> State
@inject EmployeeFacade EmployeeFacade
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="10" md="12">
                @if (State.Value.IsLoadingEmployee)
                {
                    <Loading/>
                }

                @if (State.Value.SelectedEmployee is not null)
                {
                    <MudText Typo="Typo.h1" GutterBottom>
                        @State.Value.SelectedEmployee?.FirstName @State.Value.SelectedEmployee?.LastName
                    </MudText>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.Close"
                   OnClick="Close"
                   Color="Color.Primary"
                   Variant="Variant.Filled">
            Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public int? EmployeeId { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<int>(nameof(EmployeeId), out var employeeId))
        {
            EmployeeFacade.GetOneEmployee(employeeId);
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<GetOneEmployeeFailedAction>(action =>
        {
            Snackbar.Add(action.ErrorMessage, Severity.Error);   
            Close();
        });

        await base.OnInitializedAsync();
    }

    private void Close() => MudDialog?.Cancel();
}