@using BaseProject.Infrastructure.Store.Employees
@inherits FluxorLayout
@inject ISnackbar Snackbar
@inject EmployeeFacade EmployeeFacade
@inject IState<EmployeesState> State

<MudDialog>
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            @if (State.Value.IsLoadingEmployee)
            {
                <Loading/>
            }

            @if (State.Value.SelectedEmployee is not null)
            {
                <MudForm Model="@_model"
                         @ref="_form"
                         ValidationDelay="0"
                         Class="d-flex flex-column align-stretch gap-2">

                    <div class="d-flex flex-row justify-space-evenly gap-4 flex-wrap">
                        <MudTextField
                            T="string"
                            @bind-Value="State.Value.SelectedEmployee.FirstName"
                            For="@(() => State.Value.SelectedEmployee.FirstName)"
                            Immediate="true"
                            Margin="Margin.Dense"
                            Variant="Variant.Outlined"
                            Label="First Name"
                            Required="true"
                            RequiredError="First name is required!"/>

                        <MudTextField T="string"
                                      @bind-Value="State.Value.SelectedEmployee.LastName"
                                      For="@(() => State.Value.SelectedEmployee.LastName)"
                                      Immediate="true"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Label="Last Name"
                                      Required="true"
                                      RequiredError="Last name is required!"/>
                    </div>
                    <MudTextField T="string"
                                  @bind-Value="State.Value.SelectedEmployee.Email"
                                  For="@(() => State.Value.SelectedEmployee.Email)"
                                  Immediate="true"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  Label="Email"
                                  Required="true"/>

                    <MudDatePicker
                        For="@(() => State.Value.SelectedEmployee.Birthdate)"
                        Label="Birthdate"
                        Editable="false"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"
                        @bind-Date="State.Value.SelectedEmployee.Birthdate"
                        Required
                        RequiredError="Birthdate is required"/>

                    <MudTextField T="string"
                                  Lines="3"
                                  @bind-Value="State.Value.SelectedEmployee.Address"
                                  For="@(() => State.Value.SelectedEmployee.Address)"
                                  Variant="Variant.Outlined"
                                  Label="Address"/>

                    <MudTextField T="string"
                                  Lines="3"
                                  @bind-Value="State.Value.SelectedEmployee.Note"
                                  For="@(() => State.Value.SelectedEmployee.Note)"
                                  Variant="Variant.Outlined"
                                  Label="Note"/>

                </MudForm>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel"
                   OnClick="Cancel"
                   Color="Color.Error"
                   Variant="Variant.Outlined"
                   Class="ml-4">
            Cancel
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Save"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="Submit"
                   Disabled="@(!_form.IsValid)">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public long? EmployeeId { get; set; }

    private EmployeeDto? _model = new();
    private MudForm _form = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<long>(nameof(EmployeeId), out var employeeId))
        {
            EmployeeFacade.GetOneEmployee(employeeId);
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<CloseEditEmployeeModal>(_ =>
            MudDialog?.Close(DialogResult.Ok(false)));
        
        SubscribeToAction<EmployeeFailedAction>(action =>
            Snackbar.Add(action.ErrorMessage, Severity.Error));

        SubscribeToAction<UpdateEmployeeSuccessAction>(action =>
        {
            Snackbar.Add($"Employee updated", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        });

        _model = State.Value.SelectedEmployee;

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!_form.IsValid || EmployeeId is null)
            return;

        EmployeeFacade
            .UpdateEmployee(EmployeeId.Value, State.Value.SelectedEmployee!);
    }

    private void Cancel() 
        => EmployeeFacade.CloseEditEmployeeModal();

}