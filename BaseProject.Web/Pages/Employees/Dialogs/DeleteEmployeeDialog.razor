@using BaseProject.Infrastructure.Store.Employees

@inherits FluxorLayout
@inject EmployeeFacade EmployeeFacade
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Are you sure you want to delete @EmployeeName ?</MudText>

        <MudText Typo="Typo.body2">This will remove the employee data permanently</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel"
                   OnClick="Cancel"
                   Color="Color.Secondary"
                   Variant="Variant.Outlined">
            Cancel
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Delete"
                   OnClick="Submit"
                   Color="Color.Error"
                   Variant="Variant.Filled">
            Delete
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public string? EmployeeName { get; set; }

    [Parameter]
    public int? EmployeeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<DeleteEmployeeSuccessAction>(action =>
        {
            Snackbar.Add($"Employee Id:{action.Id} deleted", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        });
        
        SubscribeToAction<CloseDeleteEmployeeModelAction>(_ => 
            MudDialog?.Close(DialogResult.Ok(false)));

        await base.OnInitializedAsync();
    }

    private void Submit() 
        => EmployeeFacade.DeleteEmployee(EmployeeId!.Value);
    
    private void Cancel()
    => EmployeeFacade.CloseDeleteEmployeeModal();
}