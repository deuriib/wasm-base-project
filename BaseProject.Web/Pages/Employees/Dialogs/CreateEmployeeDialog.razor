@using BaseProject.Infrastructure.Store.Employees
@using FluentValidation
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Severity = MudBlazor.Severity
@using BaseProject.Infrastructure.Fakers
@inherits FluxorLayout
@inject EmployeeFacade EmployeeFacade
@inject IValidator<CreateEmployeeDto> Validator
@inject IWebAssemblyHostEnvironment Environment
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <div class="pa-2 d-flex flex-column gap-4 align-center justify-space-evenly">
            <MudContainer MaxWidth="MaxWidth.Large">
                <MudForm Model="@Model"
                         @ref="Form"
                         Validation="@(Validator.ValidateValue())"
                         ValidationDelay="0"
                         class="d-flex flex-column align-stretch gap-2">
                    
                    <div class="d-flex flex-row justify-space-evenly gap-4">
                        <MudTextField T="string"
                                      @bind-Value="Model!.FirstName"
                                      For="@(() => Model!.FirstName)"
                                      Immediate="true"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Label="First Name"/>

                        <MudTextField T="string"
                                      @bind-Value="Model!.LastName"
                                      For="@(() => Model!.LastName)"
                                      Immediate="true"
                                      Margin="Margin.Dense"
                                      Variant="Variant.Outlined"
                                      Label="Last Name"/>
                    </div>

                    <MudTextField T="string"
                                  @bind-Value="Model!.Email"
                                  For="@(() => Model!.Email)"
                                  Immediate="true"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  Label="Email"/>

                    <MudDatePicker For="@(() => Model!.Birthdate)"
                                   @bind-Date="Model!.Birthdate"
                                   DateFormat="dd/MM/yyyy"
                                   Label="Birthdate"
                                   OpenTo="OpenTo.Year"
                                   Rounded="true"
                                   Editable="false"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"/>

                </MudForm>
            </MudContainer>

            <MudContainer Class="d-flex flex-row align-end justify-end gap-4">
                <MudButton StartIcon="@Icons.Material.Filled.Cancel"
                           OnClick="Cancel"
                           Color="Color.Error"
                           Variant="Variant.Outlined">
                    Cancel
                </MudButton>

                <MudButton StartIcon="@Icons.Material.Filled.Save"
                           OnClick="Submit"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           Disabled="@(!Form!.IsValid)">
                    Save
                </MudButton>
            </MudContainer>
        </div>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private CreateEmployeeDto? Model = new();

    private MudForm? Form = new();

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<CloseCreateEmployeeAction>(_ =>
        {
            Snackbar.Add("Employee creation cancelled", Severity.Info);
            
            MudDialog?.Close(DialogResult.Ok(false));
        });

        SubscribeToAction<CreateEmployeeSuccessAction>(_ =>
        {
            Snackbar.Add("Employee created successfully", Severity.Success);
            
            MudDialog?.Close(DialogResult.Ok(true));
        });

        if (Environment.IsDevelopment())
        {
            var faker = new CreateEmployeeDtoFaker();
           Model = faker.Generate();
        }

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!Form!.IsValid)
            return;

        if (Model is null)
            return;

        EmployeeFacade.CreateEmployee(Model);
    }

    private void Cancel()
        => EmployeeFacade.CloseCreateEmployeeModal();

}