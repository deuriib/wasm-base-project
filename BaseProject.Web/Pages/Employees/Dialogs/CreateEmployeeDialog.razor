@using BaseProject.Infrastructure.Store.Employees
@using BaseProject.Domain.Dtos
@inherits FluxorLayout
@inject EmployeeFacade EmployeeFacade

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="10" md="12">
                <MudForm Model="@_model" @ref="_form" @bind-IsValid="@_success">
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField T="string" @bind-Value="_model.FirstName" For="@(() => _model.FirstName)" Immediate="false" DebounceInterval="500" Label="First Name" Required="true" RequiredError="First name is required!"/>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField T="string" @bind-Value="_model.LastName" For="@(() => _model.LastName)" Immediate="false" DebounceInterval="500" Label="Last Name" Required="true" RequiredError="Last name is required!"/>
                        </MudItem>
                    </MudGrid>
                     <MudTextField T="string" @bind-Value="_model.Email" For="@(() => _model.Email)" Immediate="false" DebounceInterval="500" Label="Email" Required="true"/>
                    <MudDatePicker For="@(() => _model.Birthdate)" Label="Birthdate" Editable="false" @bind-Date="_model.Birthdate" Required RequiredError="Birthdate is required"/>

                    <div class="d-flex align-center justify-end mt-6">
                        <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!_success)">Save</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel" Color="Color.Error" Variant="Variant.Outlined" Class="ml-4">Cancel</MudButton>
                    </div>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private CreateEmployeeDto? _model = new();

    private MudForm? _form;
    private bool _success;

    protected override async Task OnInitializedAsync()
    {
        MudDialog?.SetOptions(new DialogOptions()
        {
            DisableBackdropClick = true,
            CloseButton = false,
            CloseOnEscapeKey = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });

        SubscribeToAction<CreateEmployeeSuccessAction>(_ =>
        {
            // Dispatcher.Dispatch(new GetEmployeesAction());
            
            MudDialog?.Close(DialogResult.Ok(true));
        });

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!_success)
            return;

        if (_model is null)
            return;

        EmployeeFacade.CreateEmployee(_model);
    }

    private void Cancel() => MudDialog?.Cancel();
}