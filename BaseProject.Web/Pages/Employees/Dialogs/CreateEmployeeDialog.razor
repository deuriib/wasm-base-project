@using BaseProject.Infrastructure.Store.Employees
@using FluentValidation
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Severity = MudBlazor.Severity
@using BaseProject.Infrastructure.Fakers
@inherits FluxorLayout
@inject EmployeeFacade EmployeeFacade
@inject IValidator<CreateEmployeeDto> Validator
@inject IWebAssemblyHostEnvironment Environment
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudForm Model="@_model"
                     @ref="_form"
                     Validation="@(Validator.ValidateValue())"
                     ValidationDelay="0"
                     Class="d-flex flex-column align-stretch gap-2">

                <div class="d-flex flex-row justify-space-evenly gap-4 flex-wrap">
                    <MudTextField T="string"
                                  @bind-Value="_model.FirstName"
                                  For="@(() => _model.FirstName)"
                                  Immediate="true"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  Label="First Name"/>

                    <MudTextField T="string"
                                  @bind-Value="_model.LastName"
                                  For="@(() => _model.LastName)"
                                  Immediate="true"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"
                                  Label="Last Name"/>
                </div>

                <MudTextField T="string"
                              @bind-Value="_model.Email"
                              For="@(() => _model.Email)"
                              Immediate="true"
                              Margin="Margin.Dense"
                              Variant="Variant.Outlined"
                              Label="Email"/>

                <MudDatePicker For="@(() => _model.Birthdate)"
                               @bind-Date="_model.Birthdate"
                               DateFormat="dd/MM/yyyy"
                               Label="Birthdate"
                               OpenTo="OpenTo.Year"
                               Rounded="true"
                               Editable="false"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"/>

            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel"
                   OnClick="Cancel"
                   Color="Color.Error"
                   Variant="Variant.Outlined">
            Cancel
        </MudButton>

        <MudButton StartIcon="@Icons.Material.Filled.Save"
                   OnClick="Submit"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   Disabled="@(!_form.IsValid)">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private CreateEmployeeDto _model = new();
    private MudForm _form = new();

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<CloseCreateEmployeeAction>(_ =>
            MudDialog?.Close(DialogResult.Ok(false)));

        SubscribeToAction<CreateEmployeeSuccessAction>(_ =>
        {
            Snackbar.Add("Employee created successfully", Severity.Success);

            MudDialog?.Close(DialogResult.Ok(true));
        });

        if (Environment.IsDevelopment())
        {
            var faker = new CreateEmployeeDtoFaker();
            _model = faker.Generate();
        }

        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (!_form.IsValid)
            return;

        EmployeeFacade
            .CreateEmployee(_model);
    }

    private void Cancel()
        => EmployeeFacade
            .CloseCreateEmployeeModal();

}