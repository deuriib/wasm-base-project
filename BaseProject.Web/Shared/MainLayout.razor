@inherits FluxorLayout
@inject IState<AppState> AppState
@inject IState<ThemeState> ThemeState
@inject NavigationManager NavigationManager

<MudThemeProvider IsDarkMode="ThemeState.Value.IsDarkMode" Theme="ThemeState.Value.CurrentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@DrawerToggle"/>

        <MudText Typo="Typo.h6">@AppState.Value.AppName</MudText>

        <MudSpacer/>
        <MudContainer Class="gap-2 d-flex flex-row justify-end">
            <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor"
                           Color="Color.Inherit"
                           Link="https://mudblazor.com/"
                           Target="_blank"/>

            <MudIconButton Icon="@Icons.Custom.Brands.GitHub"
                           Color="Color.Inherit"
                           Link="https://github.com/MudBlazor/MudBlazor/"
                           Target="_blank"/>

            <MudTooltip Text="Settings">
                <MudIconButton Icon="@Icons.Material.Filled.Settings"
                               Title="Settings" aria-label="settings"
                               Color="Color.Inherit"
                               OnClick="SettingsDrawerToggle"/>
            </MudTooltip>

            <UserAvatar/>

        </MudContainer>
    </MudAppBar>

    <AuthorizeView>
        <Authorized>
            <MudDrawer @bind-Open="_isOpenDrawer"
                       ClipMode="DrawerClipMode.Always"
                       Anchor="Anchor.Left"
                       PreserveOpenState
                       Breakpoint="Breakpoint.Md"
                       Elevation="1"
                       Variant="@DrawerVariant.Mini">
                <NavMenu/>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudDrawer @bind-Open="@_isOpenSettingsDrawer"
               Anchor="Anchor.Right"
               ClipMode="DrawerClipMode.Never"
               Elevation="1"
               Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Settings</MudText>
        </MudDrawerHeader>

        <SettingsNavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-8">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    private bool _isOpenDrawer = true;
    private bool _isOpenSettingsDrawer;

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<LogoutActionSuccess>(action =>
            NavigationManager
                .NavigateToUri($"/authentication/login?returnUrl={action.ReturnUrl}"));

        await base.OnInitializedAsync();
    }

    private void DrawerToggle()
        => _isOpenDrawer = !_isOpenDrawer;

    private void SettingsDrawerToggle()
        => _isOpenSettingsDrawer = !_isOpenSettingsDrawer;

}