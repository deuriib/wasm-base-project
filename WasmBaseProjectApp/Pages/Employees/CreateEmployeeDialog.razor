@inherits FluxorLayout
@inject IDispatcher Dispatcher
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="10" md="12">
                <MudForm Model="@model" @ref="form" @bind-IsValid="@success">
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField T="string" @bind-Value="model.FirstName" For="@(() => model.FirstName)" Immediate="false" DebounceInterval="500" Label="First Name" Required="true" RequiredError="First name is required!"/>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField T="string" @bind-Value="model.LastName" For="@(() => model.LastName)" Immediate="false" DebounceInterval="500" Label="Last Name" Required="true" RequiredError="Last name is required!"/>
                        </MudItem>
                    </MudGrid>
                    <MudDatePicker For="@(() => model.Birthdate)" Label="Birthdate" Editable="false" @bind-Date="model.Birthdate" Required RequiredError="Birthdate is required" />
                    <MudTextField T="string" @bind-Value="model.Address" For="@(() => model.Address)" Immediate="false" DebounceInterval="500" Label="Address" Required="false"/>
                    <MudTextField T="string" @bind-Value="model.Note" For="@(() => model.Note)" Immediate="false" DebounceInterval="500" Label="Note" Required="false"/>

                    <div class="d-flex align-center justify-end mt-6">
                        <MudButton StartIcon="@Icons.Filled.Save" OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!form.IsValid)">Save</MudButton>
                        <MudButton StartIcon="@Icons.Filled.Cancel" OnClick="Cancel" Color="Color.Error" Variant="Variant.Outlined" Class="ml-4">Cancel</MudButton>
                    </div>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    CreateEmployeeDto model = new();

    MudForm form;
    bool success;

    protected override async Task OnInitializedAsync()
    {
        MudDialog?.SetOptions(new DialogOptions() { DisableBackdropClick = true, CloseButton = false, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Medium, FullWidth = true});
        SubscribeToAction<CreateEmployeeSuccessAction>(_ =>
        {
            Dispatcher.Dispatch(new GetEmployeesAction());
            MudDialog?.Close(DialogResult.Ok(true));
        });

        SubscribeToAction<CreateEmployeeFailedAction>(action =>
        {
            Snackbar.Add($"CreateNewEmployeeFailed: {action.ErrorMessage}", Severity.Error);
        });
        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (success)
        {
            Dispatcher.Dispatch(new CreateEmployeeAction(model));
        }
    }
    private void Cancel() => MudDialog?.Cancel();
}