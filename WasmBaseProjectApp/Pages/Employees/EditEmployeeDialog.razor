@inherits FluxorLayout
@inject ISnackbar Snackbar
@inject IDispatcher Dispatcher
@inject IState<EmployeesState> State

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="10" md="12">
                @if (State.Value.SelectedEmployee is null)
                {
                    <Loading />
                }
                
                @if (State.Value.SelectedEmployee is not null)
                {
                    <EditForm Model="@State.Value.SelectedEmployee" OnValidSubmit="OnValidSubmit">
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6">
                                <MudTextField T="string" @bind-Value="State.Value.SelectedEmployee.FirstName" For="@(() => State.Value.SelectedEmployee.FirstName)" Immediate="false" DebounceInterval="500" Label="First Name" Required="true" RequiredError="First name is required!"/>
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6">
                                <MudTextField T="string" @bind-Value="State.Value.SelectedEmployee.LastName" For="@(() => State.Value.SelectedEmployee.LastName)" Immediate="false" DebounceInterval="500" Label="Last Name" Required="true" RequiredError="Last name is required!"/>
                            </MudItem>
                        </MudGrid>
                        <MudDatePicker For="@(() => State.Value.SelectedEmployee.Birthdate)" Label="Birthdate" Editable="false" @bind-Date="State.Value.SelectedEmployee.Birthdate" Required RequiredError="Birthdate is required" />
                        <MudTextField T="string" @bind-Value="State.Value.SelectedEmployee.Address" For="@(() => State.Value.SelectedEmployee.Address)" Immediate="false" DebounceInterval="500" Label="Address" Required="false"/>
                        <MudTextField T="string" @bind-Value="State.Value.SelectedEmployee.Note" For="@(() => State.Value.SelectedEmployee.Note)" Immediate="false" DebounceInterval="500" Label="Note" Required="false"/>

                        <div class="d-flex align-center justify-end mt-6">
                            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Filled.Save" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
                            <MudButton StartIcon="@Icons.Filled.Cancel" OnClick="Cancel" Color="Color.Error" Variant="Variant.Outlined" Class="ml-4">Cancel</MudButton>
                        </div>
                    </EditForm>
                }

            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public int? EmployeeId { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<int>(nameof(EmployeeId), out var employeeId))
        {
            Dispatcher.Dispatch(new GetOneEmployeeAction(employeeId));
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        SubscribeToAction<UpdateEmployeeSuccessAction>(action =>
        {
            Snackbar.Add($"Employee Id:{action.Id}  updated", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        });

        MudDialog?.SetOptions(new DialogOptions()
        {
            DisableBackdropClick = true,
            CloseButton = false,
            CloseOnEscapeKey = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });
        await base.OnInitializedAsync();
    }

    private void OnValidSubmit(EditContext context)
    {
        Dispatcher.Dispatch(new UpdateEmployeeAction(EmployeeId,State.Value.SelectedEmployee));
    }

    private void Cancel() => MudDialog?.Cancel();
}