@page "/employees"
@inherits FluxorComponent
@inject IState<EmployeesState> State
@inject IDispatcher Dispatcher
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Employees</PageTitle>
<MudText Typo="Typo.h3" GutterBottom>Employees</MudText>

<MudPaper Class="pa-4 d-flex align-center justify-center" MinHeight="420px">
    <MudTable Class="flex-grow-1" Items="State.Value.Employees" Dense Loading="@State.Value.IsLoading" TotalItems="@State.Value.Employees!.Count()" Virtualize Filter="new Func<EmployeeListDto, bool>(FilterFunc1)" Hover="true" SortLabel="Sort By" Elevation="0">
        <ToolBarContent>
            <MudText Typo="Typo.h6">List of employees</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_filterString" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mx-2"></MudTextField>
            <MudButton StartIcon="@Icons.Filled.PersonAdd" Size="Size.Large" Color="Color.Primary" Variant="Variant.Outlined" OnClick="ShowCreateNewDialog">Add</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Birthdate</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Options</MudTh>
        </HeaderContent>
        <NoRecordsContent>
            <div class="d-flex align-center justify-center flex-column ">
                <MudContainer Class="flex-grow-1">
                    <MudIcon Style="@($"color:{Colors.Grey.Lighten1}")" Icon="@Icons.Filled.List" Size="Size.Large"></MudIcon>
                    <MudText Typo="Typo.subtitle1" GutterBottom Style="@($"color:{Colors.Grey.Lighten1}")">There is no employees, click + Add button to create a new one</MudText>
                </MudContainer>
            </div>
        </NoRecordsContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
            <MudTd DataLabel="Birthdate">@context.Birthdate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="Status">
                <MudButton Variant="Variant.Text" Color="context.Status ? Color.Success : Color.Error">@(context.Status ? "Active" : "Inactive")</MudButton>
            </MudTd>
            <MudTd DataLabel="Options">
                <MudButtonGroup OverrideStyles="false">
                    <MudIconButton Color="Color.Primary" Icon="@(context.Status ? Icons.Filled.PersonOff : Icons.Filled.Person)" Title="@(context.Status ? "Deactivate" : "Activate")" OnClick="() => UpdateEmployeeStatus(context.Id, context.Status)"></MudIconButton>
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Filled.Edit" Title="Edit employee" OnClick="() => ShowEditDialog(context.Id)"></MudIconButton>
                    <MudButton StartIcon="@Icons.Filled.Delete" Color="Color.Error" OnClick="() => ShowDeleteDialog(context)">Remove</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new [] { 10, 15, 20, 40, 50 }" />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    private string _filterString = "";

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new GetEmployeesAction());

        SubscribeToAction<GetEmployeesSuccessAction>(_ => { Snackbar.Add("Employees loaded", Severity.Success); });
        SubscribeToAction<UpdateEmployeeStatusSuccessAction>(action =>
        {
            Snackbar.Add($"Employee Id:{action.Id}  status updated", Severity.Success);
            Dispatcher.Dispatch(new GetEmployeesAction());
        });

        SubscribeToAction<EmployeeFailedAction>(action => { Snackbar.Add(action.ErrorMessage, Severity.Error); });

        await base.OnInitializedAsync();
    }

    private void UpdateEmployeeStatus(int id, bool status)
    {
        Dispatcher.Dispatch(new UpdateEmployeeStatusAction(id, new UpdateEmployeeStatusDto{Status = status}));
    }

    private void ShowCreateNewDialog()
    {
        DialogService.Show<CreateEmployeeDialog>("Create New Employee",
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
    }

    private void ShowEditDialog(int id)
    {
        DialogService.Show<EditEmployeeDialog>("Edit Employee", new DialogParameters { { "EmployeeId", id } },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
    }

    private void ShowDeleteDialog(EmployeeListDto employeeListDto)
    {
        DialogService.Show<DeleteEmployeeDialog>("Delete Employee", new DialogParameters { { "Employee", employeeListDto } },
            new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
    }

    private bool FilterFunc1(EmployeeListDto employeeListDto) => FilterFunc(employeeListDto, _filterString);

    private bool FilterFunc(EmployeeListDto employeeListDto, string filter)
    {
        if (string.IsNullOrWhiteSpace(filter))
            return true;
        if (employeeListDto.LastName!.Contains(filter, StringComparison.OrdinalIgnoreCase))
            return true;
        if (employeeListDto.FirstName!.Contains(filter, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}